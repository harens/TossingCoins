{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAcA,SAAS,EAAW,GACD,SAAb,EAAM,KACR,IAKJ,OAAO,OAAS,WAAM,OAAA,SAAS,iBAAiB,UAAW,IAE3D,IAAI,EAA+C,GAE/C,EAAU,CACZ,MAAO,EACP,MAAO,EACP,YAAa,WAGX,EAAwB,CAAC,EAAG,GAIhC,SAAS,IACH,IAAA,EAEE,EAAa,SAAS,eAAe,YAAiC,MACtE,EAAa,OAAO,GAEpB,EAAc,KAAK,MAAM,KAAK,SAAW,GACzC,EAAc,EAAa,EAE7B,GAAA,GAAc,GAAK,MAAM,GAC3B,EAAa,qBACR,CAGL,EAAU,GAAgB,EAAU,GAAe,GAAM,EAGrD,IAAA,EAAc,OAAO,GACrB,EAAc,OAAO,GAGrB,EAAc,GAChB,GAAe,KACf,EAAW,UAEF,EAAc,GACvB,GAAe,KACf,EAAW,WAEX,GAAe,MACf,GAAe,MACf,EAAW,YAGb,EAAa,iBAAmB,EAAc,qBAA4B,EAC1E,IAGD,SAAS,eAAe,cAAmC,UAAY,EAI1E,SAAS,IAEH,IAAA,EAAc,6DAEb,IAAA,IAAM,KAAQ,EACjB,GAAe,WAAa,OAAO,GAAQ,YAAc,OAAO,EAAU,IAAS,aAGpF,SAAS,eAAe,cAAmC,UAAY,EAAc,WAIxF,SAAS,EAAW,GACE,YAAhB,GACA,EAAQ,MAAQ,EAChB,EAAQ,MAAQ,GAIX,IAAgB,EAAQ,aAAyC,IAAzB,EAAQ,KACnC,UAAhB,GACF,EAAQ,OAAS,EACjB,EAAQ,MAAQ,GACS,UAAhB,IACT,EAAQ,MAAQ,EAChB,EAAQ,OAAS,GAIf,EAAQ,MAAQ,EAAY,GAC9B,EAAY,GAAK,EAAQ,MAChB,EAAQ,MAAQ,EAAY,KACrC,EAAY,GAAK,EAAQ,OAG3B,KAKF,EAAQ,YAAc,EAIxB,SAAS,IAEH,IAAA,EAAc,yDAElB,GAAe,yBAA2B,OAAO,EAAY,IAAM,aACnE,GAAe,yBAA2B,OAAO,EAAY,IAAM,aAGlE,SAAS,eAAe,YAAiC,UAAY,EAAc","file":"src.57c3ecfd.map","sourceRoot":"../src","sourcesContent":["// This file is part of TossingCoins.\n\n// TossingCoins is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// /TossingCoins is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with /TossingCoins.  If not, see <http://www.gnu.org/licenses/>.\n\nfunction enterInput(event: KeyboardEvent): void {\n  if (event.key == 'Enter') { // Checks if enter key is pressed to display coin amounts\n    replyToss();\n  }\n}\n\n// Once the window has loaded, records keys pressed\nwindow.onload = () => document.addEventListener('keydown', enterInput);\n\nlet headsData: { [numberHeads: number]: number } = {}; // Stores the total amount of head\n\nlet runData = {\n  heads: 0,\n  tails: 0,\n  currentSide: 'neither'\n};\n\nlet highestRuns: number[] = [0, 0];\n\n// Displays the current amount of heads and tails\n// Function is run when button is clicked\nfunction replyToss(): void {\n  let htmlOutput: string; // Final outputted result\n\n  const coinInput = (document.getElementById(\"coinToss\") as HTMLInputElement).value; // Inputted Value\n  const coinAmount = Number(coinInput); // Converted to int (results in NaN if not possible)\n\n  const headsAmount = Math.floor(Math.random() * coinAmount); // Random number between 0 and coinAmount\n  const tailsAmount = coinAmount - headsAmount;\n\n  if (coinAmount <= 0 || isNaN(coinAmount)) { // Input has to be a number that is greater than 0\n    htmlOutput = \"INVALID OPTION\";\n  } else {\n    // If key does not exist, NaN is returned, which is falsey, and so it is then created with a value of 1\n    // If it does exist, it increases by 1\n    headsData[headsAmount] = (headsData[headsAmount] + 1) || 1;\n    // String values created of relevant amounts\n    // This is so that the greatest amount can be shown\n    let headsOutput = String(headsAmount);\n    let tailsOutput = String(tailsAmount);\n\n    // Value which is greatest gets a tick\n    if (headsAmount > tailsAmount) {\n      headsOutput += \" âœ…\";\n      runCounter('heads')\n\n    } else if (headsAmount < tailsAmount) {\n      tailsOutput += \" âœ…\";\n      runCounter('tails')\n    } else { // If both have the same value\n      headsOutput += \" ðŸ’°\";\n      tailsOutput += \" ðŸ’°\";\n      runCounter('neither')\n    }\n\n    htmlOutput = \"Heads Amount: \" + headsOutput + \"<br>\" + \"Tails Amount: \" + tailsOutput;\n    countTable(); // Table drawn with data on the amount of heads\n  }\n  // Receives current value and changes it to `htmlOutput`\n  (document.getElementById(\"tossOutput\") as HTMLInputElement).innerHTML = htmlOutput;\n}\n\n// Creates table showing the number of heads and their frequencies\nfunction countTable(): void {\n  // Headers created\n  let finalOutput = \"<table><tr><th>Number of Heads</th><th>Frequency</th></tr>\";\n// tslint:disable-next-line: forin\n  for (const item in headsData) { // Creates row for each item in headData\n    finalOutput += \"<tr><td>\" + String(item) + \"</td><td>\" + String(headsData[item]) + \"</td></tr>\";\n  }\n  // Generates new table each time\n  (document.getElementById(\"headsTable\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n\n// Determines the highest run as well as the current run\nfunction runCounter(currentToss: string): void {\n  if (currentToss === 'neither'){ // It it's a tie\n      runData.heads = 0;\n      runData.tails = 0;\n    }\n  // Only the currentToss' counter can be increased\n  // It can be increased if it was the previous side or there is no current side\n  else if (currentToss === runData.currentSide ||  runData[currentToss] === 0) {\n    if (currentToss === 'heads') {\n      runData.heads += 1;\n      runData.tails = 0;\n    } else if (currentToss === 'tails') {\n      runData.heads = 0;\n      runData.tails += 1;\n    }\n\n    // Checks if current runs are greater than the highest runs\n    if (runData.heads > highestRuns[0]) {\n      highestRuns[0] = runData.heads;\n    } else if (runData.tails > highestRuns[1]) {\n      highestRuns[1] = runData.tails;\n    }\n    // Displays table showing highest runs\n    runTable();\n\n  }\n\n  // Changes current side\n  runData.currentSide = currentToss;\n}\n\n// Creates table showing runs\nfunction runTable(): void {\n  // Creates headers\n  let finalOutput = \"<table><tr><th>Coin Side</th><th>Highest Run</th></tr>\";\n\n  finalOutput += \"<tr><td>Heads</td><td>\" + String(highestRuns[0]) + \"</td></tr>\";\n  finalOutput += \"<tr><td>Tails</td><td>\" + String(highestRuns[1]) + \"</td></tr>\";\n\n  // Outputs table in the div `coinRuns`\n  (document.getElementById(\"coinRuns\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n"]}