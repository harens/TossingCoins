{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA2DC,aA3DD,SAAA,EAAoB,GACD,SAAb,EAAM,KACR,IAKJ,OAAO,OAAS,WAAM,OAAA,SAAS,iBAAiB,UAAW,IAE3D,IAAI,EAA+C,GAInD,SAAA,IACQ,IAAA,EAEE,EAAa,SAAS,eAAe,YAAiC,MACtE,EAAa,OAAO,GAEpB,EAAc,KAAK,MAAM,KAAK,SAAW,GACzC,EAAc,EAAa,EAE7B,GAAA,GAAc,GAAK,MAAM,GACzB,EAAa,qBACV,CAGH,EAAU,GAAgB,EAAU,GAAe,GAAM,EAGrD,IAAA,EAAc,OAAO,GACrB,EAAc,OAAO,GAGrB,EAAc,EACd,GAAe,KACR,EAAc,EACrB,GAAe,MAEf,GAAe,MACf,GAAe,OAGnB,EAAa,iBAAmB,EAAc,qBAA4B,EAC1E,IAGH,SAAS,eAAe,cAAmC,UAAY,EAG5E,SAAA,IAEQ,IAAA,EAAc,6DAEb,IAAA,IAAM,KAAQ,EACf,GAAe,WAAa,OAAO,GAAQ,YAAc,OAAO,EAAU,IAAS,aAGtF,SAAS,eAAe,cAAmC,UAAY,EAAc","file":"src.8f5143cd.map","sourceRoot":"../src","sourcesContent":["function enterInput(event: KeyboardEvent): void {\n  if (event.key == 'Enter') { // Checks if enter key is pressed to display coin amounts\n    replyToss()\n  }\n}\n\n// Once the window has loaded, records keys pressed\nwindow.onload = () => document.addEventListener('keydown', enterInput);\n\nlet headsData: { [numberHeads: number]: number } = {}; // Stores the total amount of heads\n\n// Displays the current amount of heads and tails\n// Function is run when button is clicked\nfunction replyToss(): void {\n    let htmlOutput: string; // Final outputted result\n\n    const coinInput = (document.getElementById(\"coinToss\") as HTMLInputElement).value; // Inputted Value\n    const coinAmount = Number(coinInput); // Converted to int (results in NaN if not possible)\n\n    const headsAmount = Math.floor(Math.random() * coinAmount); // Random number between 0 and coinAmount\n    const tailsAmount = coinAmount - headsAmount;\n\n    if (coinAmount <= 0 || isNaN(coinAmount)) { // Input has to be a number that is greater than 0\n        htmlOutput = \"INVALID OPTION\";\n    } else {\n        // If key does not exist, NaN is returned, which is falsey, and so it is then created with a value of 1\n        // If it does exist, it increases by 1\n        headsData[headsAmount] = (headsData[headsAmount] + 1) || 1;\n        // String values created of relevant amounts\n        // This is so that the greatest amount can be shown\n        let headsOutput = String(headsAmount);\n        let tailsOutput = String(tailsAmount);\n\n        // Value which is greatest gets a tick\n        if (headsAmount > tailsAmount) {\n            headsOutput += \" âœ…\";\n        } else if (headsAmount < tailsAmount) {\n            tailsOutput += \" âœ…\";\n        } else { // If both have the same value\n            headsOutput += \" ðŸ’°\";\n            tailsOutput += \" ðŸ’°\";\n        }\n\n        htmlOutput = \"Heads Amount: \" + headsOutput + \"<br>\" + \"Tails Amount: \" + tailsOutput;\n        drawTable(); // Table drawn with data on the amount of heads\n    }\n    // Receives current value and changes it to `htmlOutput`\n    (document.getElementById(\"tossOutput\") as HTMLInputElement).innerHTML = htmlOutput;\n}\n\nfunction drawTable(): void {\n    // Headers created\n    let finalOutput = \"<table><tr><th>Number of Heads</th><th>Frequency</th></tr>\";\n// tslint:disable-next-line: forin\n    for (const item in headsData) { // Creates row for each item in headData\n        finalOutput += \"<tr><td>\" + String(item) + \"</td><td>\" + String(headsData[item]) + \"</td></tr>\";\n    }\n    // Generates new table each time\n    (document.getElementById(\"headsTable\") as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n"]}