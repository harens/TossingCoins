{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,aAcA,SAAS,EAAW,GACD,SAAb,EAAM,KACR,IAKJ,OAAO,OAAS,WAAM,OAAA,SAAS,iBAAiB,UAAW,IAE3D,IAAI,EAA6C,GAIjD,SAAS,IACH,IAAA,EAIE,EAAa,OAAQ,SAAS,eAAe,YAAiC,OAE9E,EAAc,KAAK,MAAM,KAAK,SAAW,GACzC,EAAc,EAAa,EAE7B,GAAA,GAAc,GAAK,MAAM,GAC3B,EAAa,qBACR,CAGL,EAAU,GAAgB,EAAU,GAAe,GAAM,EAGrD,IAAA,EAAc,OAAO,GACrB,EAAc,OAAO,GAGrB,EAAc,GAChB,GAAe,KACf,EAAW,UAEF,EAAc,GACvB,GAAe,KACf,EAAW,WAEX,GAAe,MACf,GAAe,MACf,EAAW,YAGb,EAAa,iBAAmB,EAAc,qBAA4B,EAC1E,EAAU,CAAC,kBAAmB,aAAc,EAAW,cAGxD,SAAS,eAAe,cAAmC,UAAY,EAQ1E,SAAS,EAAU,EAAwB,EAAkD,GAEvF,IAAA,EAAc,kBAAoB,EAAa,GAAK,YAAc,EAAa,GAAK,aACpF,EAAe,EACd,IAAA,IAAM,KAAQ,EAAM,CACnB,GAAA,MAAM,QAAQ,GAAO,CAEvB,GAAe,WADG,CAAC,QAAS,SACU,GAAgB,YAAc,EAAY,GAAgB,kBAEhG,GAAe,WAAa,OAAO,GAAQ,YAAc,OAAO,EAAK,IAAS,aAEhF,IAED,SAAS,eAAe,GAAgC,UAAY,EAAc,WAIrF,IAAI,EAAqC,CACvC,MAAO,EACP,MAAO,GAIL,EAAc,UAGd,EAAwB,CAAC,EAAG,GAGhC,SAAS,EAAW,GACE,YAAhB,GACF,EAAQ,MAAQ,EAChB,EAAQ,MAAQ,GAIT,IAAgB,GAAwC,IAAzB,EAAQ,KAC1B,UAAhB,GACF,EAAQ,OAAS,EACjB,EAAQ,MAAQ,GACS,UAAhB,IACT,EAAQ,MAAQ,EAChB,EAAQ,OAAS,GAIf,EAAQ,MAAQ,EAAY,GAC9B,EAAY,GAAK,EAAQ,MAChB,EAAQ,MAAQ,EAAY,KACrC,EAAY,GAAK,EAAQ,OAG3B,EAAU,CAAC,YAAa,eAAgB,EAAa,aAGvD,EAAc","file":"src.2462b3c6.map","sourceRoot":"../src","sourcesContent":["// This file is part of TossingCoins.\n\n// TossingCoins is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// /TossingCoins is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with /TossingCoins.  If not, see <http://www.gnu.org/licenses/>.\n\nfunction enterInput(event: KeyboardEvent): void {\n  if (event.key == 'Enter') { // Checks if enter key is pressed to display coin amounts\n    replyToss();\n  }\n}\n\n// Once the window has loaded, records keys pressed\nwindow.onload = () => document.addEventListener('keydown', enterInput);\n\nlet headsData: {[headsAmount: number]: number} = {}; // Stores the total amount of head\n\n// Displays the current amount of heads and tails\n// Function is run when button is clicked\nfunction replyToss(): void {\n  let htmlOutput: string; // Final outputted result\n\n  // Inputted Value\n  // Converted to int (results in NaN if not possible)\n  const coinAmount = Number((document.getElementById(\"coinToss\") as HTMLInputElement).value);\n\n  const headsAmount = Math.floor(Math.random() * coinAmount); // Random number between 0 and coinAmount\n  const tailsAmount = coinAmount - headsAmount;\n\n  if (coinAmount <= 0 || isNaN(coinAmount)) { // Input has to be a number that is greater than 0\n    htmlOutput = \"INVALID OPTION\";\n  } else {\n    // If key does not exist, NaN is returned, which is falsey, and so it is then created with a value of 1\n    // If it does exist, it increases by 1\n    headsData[headsAmount] = (headsData[headsAmount] + 1) || 1;\n    // String values created of relevant amounts\n    // This is so that the greatest amount can be shown\n    let headsOutput = String(headsAmount);\n    let tailsOutput = String(tailsAmount);\n\n    // Value which is greatest gets a tick\n    if (headsAmount > tailsAmount) {\n      headsOutput += \" âœ…\";\n      runCounter('heads'); // Determines how many heads there are in a row\n\n    } else if (headsAmount < tailsAmount) {\n      tailsOutput += \" âœ…\";\n      runCounter('tails');\n    } else { // If both have the same value\n      headsOutput += \" ðŸ’°\";\n      tailsOutput += \" ðŸ’°\";\n      runCounter('neither');\n    }\n\n    htmlOutput = \"Heads Amount: \" + headsOutput + \"<br>\" + \"Tails Amount: \" + tailsOutput;\n    drawTable(['Number of Heads', 'Frequency'], headsData, 'headsTable'); // Table drawn with data on the amount of heads\n  }\n  // Receives current value and changes it to `htmlOutput`\n  (document.getElementById(\"tossOutput\") as HTMLInputElement).innerHTML = htmlOutput;\n}\n\n// drawTable Parameters:\n// tableHeaders: Two strings in a list denoting the headers\n// Data: Dictionary/List containing relevant information\n// elementID: Where to be placed in the index.html\n// side: Denotes the side of the coin for runs\nfunction drawTable(tableHeaders: string[], data: {[headsAmount: number]: number} | number[], elementID: string): void {\n  // Headers created\n  let finalOutput = \"<table><tr><th>\" + tableHeaders[0] + \"</th><th>\" + tableHeaders[1] + \"</th></tr>\";\n  let list_counter = 0; // Iterates through highestRuns\n  for (const item in data) { // Creates row for each item in headData\n    if (Array.isArray(data)) { // If it's a list, and therefore coin runs\n      const coin_side = ['Heads', 'Tails'];\n      finalOutput += \"<tr><td>\" + coin_side[list_counter] + \"</td><td>\" + highestRuns[list_counter] + \"</td></tr>\";\n    } else { // If it's a dictionary, and therefore Heads amount\n      finalOutput += \"<tr><td>\" + String(item) + \"</td><td>\" + String(data[item]) + \"</td></tr>\";\n    }\n    list_counter++;\n  }\n  (document.getElementById(elementID) as HTMLInputElement).innerHTML = finalOutput + \"</table>\";\n}\n\n// Current run of heads and tails\nlet runData: {[value: string]: number} = {\n  heads: 0,\n  tails: 0,\n};\n\n// Last side of the coin that was greatest\nlet currentSide = 'neither';\n\n// Stores the highest repetitions of heads and tails\nlet highestRuns: number[] = [0, 0];\n\n// Determines the highest run as well as the current run\nfunction runCounter(currentToss: string): void {\n  if (currentToss === 'neither') { // It it's a tie\n    runData.heads = 0;\n    runData.tails = 0;\n  }\n  // Only the currentToss' counter can be increased\n  // It can be increased if it was the previous side or if it's the new run\n  else if (currentToss === currentSide || runData[currentToss] === 0) {\n    if (currentToss === 'heads') {\n      runData.heads += 1;\n      runData.tails = 0;\n    } else if (currentToss === 'tails') {\n      runData.heads = 0;\n      runData.tails += 1;\n    }\n\n    // Checks if current runs are greater than the highest runs\n    if (runData.heads > highestRuns[0]) {\n      highestRuns[0] = runData.heads;\n    } else if (runData.tails > highestRuns[1]) {\n      highestRuns[1] = runData.tails;\n    }\n    // Displays table showing highest runs\n    drawTable(['Coin Side', 'Highest Run'], highestRuns, 'coinRuns');\n  }\n  // Changes current side\n  currentSide = currentToss;\n}\n"]}